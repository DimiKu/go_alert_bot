// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package users is a generated GoMock package.
package users

import (
	db_actions "go_alert_bot/internal/db_actions"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// CheckIfExistUser mocks base method.
func (m *MockUserRepo) CheckIfExistUser(user db_actions.UserDb) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfExistUser", user)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckIfExistUser indicates an expected call of CheckIfExistUser.
func (mr *MockUserRepoMockRecorder) CheckIfExistUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfExistUser", reflect.TypeOf((*MockUserRepo)(nil).CheckIfExistUser), user)
}

// CreateUser mocks base method.
func (m *MockUserRepo) CreateUser(user db_actions.UserDb) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepoMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepo)(nil).CreateUser), user)
}
